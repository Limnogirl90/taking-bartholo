name: publish

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - 'release/*'
      - 'chart-*'

jobs:
  build-id:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          BUILD_ID="${BRANCH}-${REVISION}-${TS}"
          LATEST_ID=canary
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            BUILD_ID=${GITHUB_REF/refs\/tags\//}
            LATEST_ID=latest
          fi
          echo BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') >> $GITHUB_OUTPUT
          echo BUILD_ID=${BUILD_ID} >> $GITHUB_OUTPUT
          echo LATEST_ID=${LATEST_ID} >> $GITHUB_OUTPUT
          set -x
          echo BUILD_ID=${BUILD_ID}
    outputs:
      BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}

  docker-push:
    needs: build-id
    permissions:
      packages: write
      contents: read
      id-token: write # needed for signing the images with GitHub OIDC Token **not production ready**
    env:
      IMAGE: ghcr.io/${{ github.actor }}/taking-bartholo
    runs-on: ubuntu-latest
    steps:
      - name: Set BUILD_ID
        id: build-id
        run: |
          echo BUILD_ID=${{ needs.build-id.outputs.BUILD_ID }} >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # pin@v2
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # pin@v2

      # Use Cosign to sign and verify site content as OCI
      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # pin@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        id: checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3

      - id: docker_meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.IMAGE }}
          tags: type=sha,format=long

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # pin@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_ID=${{ steps.build-id.outputs.BUILD_ID }}
            GITHUB_ACTOR=${{ github.actor }}
          tags: |
            ${{ env.IMAGE }}:${{ steps.build-id.outputs.BUILD_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo digest=${{ steps.docker_build.outputs.digest }} >> $GITHUB_OUTPUT

      - name: Sign the images with GitHub OIDC Token
        run: cosign sign --yes ${TAGS}
        env:
          TAGS: ${{ env.IMAGE }}@${{ steps.docker_build.outputs.digest }}

  spin-registry-push:
    needs: build-id
    permissions:
      packages: write
      contents: read
    env:
      IMAGE: ghcr.io/${{ github.actor }}/taking-bartholo/oci
    runs-on: ubuntu-latest
    steps:
      - name: Set BUILD_ID
        id: build-id
        run: |
          echo BUILD_ID=${{ needs.build-id.outputs.BUILD_ID }} >> $GITHUB_OUTPUT

      - name: Setup Spin CLI
        uses: kingdonb/taking-bartholo/action@659658877aa4d8e895d09cce3fbc5fa8f8a0f241 # pin@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # pin@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        id: checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3

      - name: Publish v1
        id: publish
        run: |
          spin registry push ${{ env.IMAGE }}:${{ steps.build-id.outputs.BUILD_ID }}
